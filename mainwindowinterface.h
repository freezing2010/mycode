/*
 * This file was generated by qdbusxml2cpp-fix version 0.8
 * Command line was: qdbusxml2cpp-fix com.deepin.dbus.demo.xml -p mainwindowinterface
 *
 * qdbusxml2cpp-fix is Copyright (C) 2016 Deepin Technology Co., Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef MAINWINDOWINTERFACE_H
#define MAINWINDOWINTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

#include <DBusExtendedAbstractInterface>
#include <QtDBus/QtDBus>


/*
 * Proxy class for interface com.deepin.dbus.demo
 */
class __ComDeepinDbusDemoInterfacePrivate;
class __ComDeepinDbusDemoInterface : public DBusExtendedAbstractInterface
{
    Q_OBJECT

public:
    static inline const char *staticInterfaceName()
    { return "com.deepin.dbus.demo"; }

public:
    explicit __ComDeepinDbusDemoInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~__ComDeepinDbusDemoInterface();

    Q_PROPERTY(bool passed READ passed WRITE setPassed NOTIFY PassedChanged)
    bool passed();
    void setPassed(bool value);

    Q_PROPERTY(double temperature READ temperature WRITE setTemperature NOTIFY TemperatureChanged)
    double temperature();
    void setTemperature(double value);

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<bool> methodPass(double temperature)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(temperature);
        return asyncCallWithArgumentList(QStringLiteral("methodPass"), argumentList);
    }



    inline QDBusPendingReply<> showResult(bool value)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(value);
        return asyncCallWithArgumentList(QStringLiteral("showResult"), argumentList);
    }

    inline void showResultQueued(bool value)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(value);

        CallQueued(QStringLiteral("showResult"), argumentList);
    }



Q_SIGNALS: // SIGNALS
  
    void temperatureChanged(double temperature);
    // begin property changed signals
    void PassedChanged(bool  value) const;
    void TemperatureChanged(double  value) const;

public Q_SLOTS:
    void CallQueued(const QString &callName, const QList<QVariant> &args);

private Q_SLOTS:
    void onPendingCallFinished(QDBusPendingCallWatcher *w);
    void onPropertyChanged(const QString &propName, const QVariant &value);

private:
    __ComDeepinDbusDemoInterfacePrivate *d_ptr;
};

namespace com {
  namespace deepin {
    namespace dbus {
      typedef ::__ComDeepinDbusDemoInterface demo;
    }
  }
}
#endif
