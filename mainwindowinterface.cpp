/*
 * This file was generated by qdbusxml2cpp-fix version 0.8
 * Command line was: qdbusxml2cpp-fix com.deepin.dbus.demo.xml -p mainwindowinterface
 *
 * qdbusxml2cpp-fix is Copyright (C) 2016 Deepin Technology Co., Ltd.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#include "mainwindowinterface.h"

/*
 * Implementation of interface class __ComDeepinDbusDemoInterface
 */

class __ComDeepinDbusDemoInterfacePrivate
{
public:
   __ComDeepinDbusDemoInterfacePrivate() = default;

    // begin member variables
    bool passed;
    double temperature;

public:
    QMap<QString, QDBusPendingCallWatcher *> m_processingCalls;
    QMap<QString, QList<QVariant>> m_waittingCalls;
};

__ComDeepinDbusDemoInterface::__ComDeepinDbusDemoInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent)
    : DBusExtendedAbstractInterface(service, path, staticInterfaceName(), connection, parent)
    , d_ptr(new __ComDeepinDbusDemoInterfacePrivate)
{
    connect(this, &__ComDeepinDbusDemoInterface::propertyChanged, this, &__ComDeepinDbusDemoInterface::onPropertyChanged);

}

__ComDeepinDbusDemoInterface::~__ComDeepinDbusDemoInterface()
{
    qDeleteAll(d_ptr->m_processingCalls.values());
    delete d_ptr;
}

void __ComDeepinDbusDemoInterface::onPropertyChanged(const QString &propName, const QVariant &value)
{
    if (propName == QStringLiteral("passed"))
    {
        const bool &passed = qvariant_cast<bool>(value);
        if (d_ptr->passed != passed)
        {
            d_ptr->passed = passed;
            Q_EMIT PassedChanged(d_ptr->passed);
        }
        return;
    }

    if (propName == QStringLiteral("temperature"))
    {
        const double &temperature = qvariant_cast<double>(value);
        if (d_ptr->temperature != temperature)
        {
            d_ptr->temperature = temperature;
            Q_EMIT TemperatureChanged(d_ptr->temperature);
        }
        return;
    }

    qWarning() << "property not handle: " << propName;
    return;
}

bool __ComDeepinDbusDemoInterface::passed()
{
    return qvariant_cast<bool>(internalPropGet("passed", &d_ptr->passed));
}

void __ComDeepinDbusDemoInterface::setPassed(bool value)
{

   internalPropSet("passed", QVariant::fromValue(value), &d_ptr->passed);
}

double __ComDeepinDbusDemoInterface::temperature()
{
    return qvariant_cast<double>(internalPropGet("temperature", &d_ptr->temperature));
}

void __ComDeepinDbusDemoInterface::setTemperature(double value)
{

   internalPropSet("temperature", QVariant::fromValue(value), &d_ptr->temperature);
}

void __ComDeepinDbusDemoInterface::CallQueued(const QString &callName, const QList<QVariant> &args)
{
    if (d_ptr->m_waittingCalls.contains(callName))
    {
        d_ptr->m_waittingCalls[callName] = args;
        return;
    }
    if (d_ptr->m_processingCalls.contains(callName))
    {
        d_ptr->m_waittingCalls.insert(callName, args);
    } else {
        QDBusPendingCallWatcher *watcher = new QDBusPendingCallWatcher(asyncCallWithArgumentList(callName, args));
        connect(watcher, &QDBusPendingCallWatcher::finished, this, &__ComDeepinDbusDemoInterface::onPendingCallFinished);
        d_ptr->m_processingCalls.insert(callName, watcher);
    }
}

void __ComDeepinDbusDemoInterface::onPendingCallFinished(QDBusPendingCallWatcher *w)
{
    w->deleteLater();
    const auto callName = d_ptr->m_processingCalls.key(w);
    Q_ASSERT(!callName.isEmpty());
    if (callName.isEmpty())
        return;
    d_ptr->m_processingCalls.remove(callName);
    if (!d_ptr->m_waittingCalls.contains(callName))
        return;
    const auto args = d_ptr->m_waittingCalls.take(callName);
    CallQueued(callName, args);
}
