/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp com.deepin.dbus.demo.xml -i mainwindow.h -a mainwindowadapter
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef MAINWINDOWADAPTER_H
#define MAINWINDOWADAPTER_H

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
#include "mainwindow.h"
QT_BEGIN_NAMESPACE
class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;
QT_END_NAMESPACE

/*
 * Adaptor class for interface com.deepin.dbus.demo
 */
class DemoAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "com.deepin.dbus.demo")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"com.deepin.dbus.demo\">\n"
"    <property access=\"readwrite\" type=\"b\" name=\"passed\"/>\n"
"    <property access=\"readwrite\" type=\"d\" name=\"temperature\"/>\n"
"    <signal name=\"signalPass\">\n"
"      <arg direction=\"out\" type=\"b\" name=\"pass\"/>\n"
"    </signal>\n"
"    <signal name=\"passedChanged\">\n"
"      <arg direction=\"out\" type=\"b\" name=\"passed\"/>\n"
"    </signal>\n"
"    <signal name=\"temperatureChanged\">\n"
"      <arg direction=\"out\" type=\"d\" name=\"temperature\"/>\n"
"    </signal>\n"
"    <method name=\"methodPass\">\n"
"      <arg direction=\"out\" type=\"b\"/>\n"
"      <arg direction=\"in\" type=\"d\" name=\"temperature\"/>\n"
"    </method>\n"
"    <method name=\"showResult\">\n"
"      <arg direction=\"in\" type=\"b\" name=\"value\"/>\n"
"    </method>\n"
"  </interface>\n"
        "")
public:
    DemoAdaptor(QObject *parent);
    virtual ~DemoAdaptor();

public: // PROPERTIES
    Q_PROPERTY(bool passed READ passed WRITE setPassed NOTIFY passedChanged)
    bool passed() const;
    void setPassed(bool value);

    Q_PROPERTY(double temperature READ temperature WRITE setTemperature NOTIFY temperatureChanged)
    double temperature() const;
    void setTemperature(double value);

public Q_SLOTS: // METHODS
    bool methodPass(double temperature);
    void showResult(bool value);

Q_SIGNALS: // SIGNALS
    void signalPass(bool pass);

    void passedChanged(bool passed);
    void temperatureChanged(double temperature);
};

#endif
